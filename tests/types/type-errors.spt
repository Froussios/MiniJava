module types

language MiniJava
start symbol Start

setup Common [[
	class Main
	{
		public static void main ( String[] args )
		{
			System.out.println(0);
		}
	}
]]

test print boolean [[
	class C
	{
		public int method ()
		{
			System.out.println([[true]]);
		}
	}
]] 1 error



//
// Invalid types in operations
//



test invalid type in add [[
	class C
	{
		public int method ()
		{
			int i;
			i = 1;
			return i + false;
		}
	}
]] 1 error

test invalid type in substraction [[
	class C
	{
		public int method ()
		{
			int i;
			int[] arr;
			return arr - i;
		}
	}
]] 1 error

test invalid type in multiplication [[
	class C
	{
		public int method ()
		{
			return 2 * new C();
		}
	}
]] 1 error

test invalid type in less-than [[
	class C
	{
		public boolean method ()
		{
			return 2 < true;
		}
	}
]] 1 error

test invalid type in and [[
	class C
	{
		public boolean method ()
		{
			return false && new int[2];
		}
	}
]] 1 error

test invalid type in not [[
	class C
	{
		public boolean method ()
		{
			return !1;
		}
	}
]] 1 error



//
// Type errors in statemets
//



test invalid type in if statement [[
	class C
	{
		public int method ()
		{
			int i;
			if ( 1 ) i = 0;
			else i = 1;
			return i;
		}
	}
]] 1 error

test invalid type in if statement [[
	class C
	{
		public int method ()
		{
			int i;
			int[] arr;
			if ( arr ) i = 0;
			else i = 1;
			return i;
		}
	}
]] 1 error

test invalid type in while statement [[
	class C
	{
		public int method ()
		{
			int i;
			while ( i ) i = 0;
			return i;
		}
	}
]] 1 error

test invalid type in while statement [[
	class C
	{
		public int method ()
		{
			int i;
			while ( new C() ) i = 0;
			return i;
		}
	}
]] 1 error

test invalid type in assignment [[
	class C
	{
		public int method ()
		{
			int i;
			i = false;
			return i;
		}
	}
]] 1 error

test invalid type in assignment [[
	class F {}
	class C
	{
		public int method ()
		{
			C c;
			F f;
			c = new F();
			return 1;
		}
	}
]] 1 error

test invalid type in assignment [[
	class C
	{
		public int method (int[] param)
		{
			param[0] = new int[5];
			return 0;
		}
	}
]] 1 error



//
// Errors in array indexing and instantiation
//



test invalid type in new array size [[
	class C
	{
		public int method ()
		{
			int[] arr;
			arr = new int[false];
			return 0;
		}
	}
]] 1 error

test invalid type in array index [[
	class C
	{
		public int method ( int[] arr )
		{
			arr[new C()] = 1;
			return 0;
		}
	}
]] 1 error



//
// Print
//



test invalid type in println [[
	class C
	{
		public int method ()
		{
			System.out.println(new C());
			return 0;
		}
	}
]] 1 error



//
// Method return types
//



test invalid method return type [[
	class C
	{
		public int method ()
		{
			return false;
		}
	}
]] 1 error

test invalid method return type [[
	class C
	{
		public C method ()
		{
			return (new int[]);
		}
	}
]] 1 error

test invalid method return type [[
	class C
	{
		public boolean method ()
		{
			return new C();
		}
	}
]] 1 error