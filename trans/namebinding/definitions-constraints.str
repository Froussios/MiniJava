module namebinding/definitions-constraints


imports

  assignment1/MiniJava
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  namebinding/resolution-rules
  namebinding/type-constructors
  
	
strategies

  nabl-check-disable-duplicate(|uri, ns) = id
  nabl-check-disable-hiding(|uri, ns) = id
  nabl-check-disable-unresolved = id
	
rules

	//
	// Errors for undefined references
	//
	
	// Cannot resolve class in type
	nabl-constraint(|ctx):
		ClassType(c) -> <fail>
		where
			<has-annotation(?Use(task))> c ;
			msg  := $[The definition for class [c] is not found] ;
			<task-create-error-on-failure(|ctx, task, msg)> c
    
    // Cannot resolve class parent  
	nabl-constraint(|ctx):
	    Parent(c) -> <fail>
	    where
		    <has-annotation(?Use(task))> c ;
		    msg  := $[The definition for the parent class [c] is not found] ;
		    <task-create-error-on-failure(|ctx, task, msg)> c
	
	// Cannot resolve class in class instatiation
	nabl-constraint(|ctx):
	    NewObject(c) -> <fail>
	    where
		    <has-annotation(?Use(task))> c ;
		    msg  := $[The definition for class [c] is not found] ;
		    <task-create-error-on-failure(|ctx, task, msg)> c
	
	// Cannot resolve method in method call
	nabl-constraint(|ctx):
		Call(_,m,_) -> <fail>
		where
			<has-annotation(?Use(task))> m ;
		    msg  := $[Method [m] is not definined] ;
		    <task-create-error-on-failure(|ctx, task, msg)> m
	
	// Cannot resolve variable/field/parameter reference
	nabl-constraint(|ctx):
		VarRef(v) -> <fail>
		where
			<has-annotation(?Use(task))> v ;
		    msg  := $[Variable [v] is undefined] ;
		    <task-create-error-on-failure(|ctx, task, msg)> v
		    
    
    //
    // Rules for duplicate definitions
    //
    
    // Duplicate class definition
    nabl-constraint(|ctx):
    	Class(c,_,_,_) -> <fail>
    	where
    		task := <nabl-lookup-local(|ctx)> c ;
    		msg := $[Class [c] is already defined somewhere else] ;
    		<task-create-error-on-multiple(|ctx, task, msg)> c
    
    // Duplicate parameter definition
    nabl-constraint(|ctx):
    	Param(_,p) -> <fail>
    	where
    		task := <nabl-lookup-local(|ctx)> p ;
    		msg := $[A parameter with name [p] is already defined] ;
    		<task-create-error-on-multiple(|ctx, task, msg)> p
    
    // Duplicate variable definition
    nabl-constraint(|ctx):
    	Var(_,p) -> <fail>
    	where
    		task := <nabl-lookup-local(|ctx)> p ;
    		msg := $[A variable with name [p] is already defined] ;
    		<task-create-error-on-multiple(|ctx, task, msg)> p
    		
    // Duplicate field definition
    nabl-constraint(|ctx):
    	Field(_,p) -> <fail>
    	where
    		task := <nabl-lookup-local(|ctx)> p ;
    		msg := $[A variable with name [p] is already defined] ;
    		<task-create-error-on-multiple(|ctx, task, msg)> p
    
    
    //
    // Hidding
    //
    
    nabl-constraint(|ctx):
    	Var(_,v) -> <fail>
    	where
    		task := <nabl-lookup-lexical(|ctx, NablNsField())> v;
    		msg := $[Variable [v] hiddes a field] ;
    		<task-create-warning-on-success(|ctx, task, msg)> v
  
    
    nabl-constraint(|ctx):
    	Var(_,v) -> <fail>
    	where
    		task := <nabl-lookup-lexical(|ctx, NablNsParam())> v;
    		msg := $[Variable [v] hiddes a parameter] ;
    		<task-create-error-on-success(|ctx, task, msg)> v // TODO: is this a warning instead?
    	
    	
    //TODO: field hiding other fields?
    
    
    //
    // Main references
    //
    
	nabl-constraint(|ctx):
		ClassType(c) -> <fail>
		where
			lookup := <type-lookup(|ctx)> c ;
			match  := <type-match(|ctx, MAINCLASS())> lookup ; //TODO: where should I have declared a constructor?
			msg    := "Illegal reference to main class" ;
			<task-create-error-on-success(|ctx, match, msg)> c
	
	nabl-constraint(|ctx):
		Parent(c) -> <fail>
		where
			lookup := <type-lookup(|ctx)> c ;
			match  := <type-match(|ctx, MAINCLASS())> lookup ; //TODO: where should I have declared a constructor?
			msg    := "Illegal reference to main class" ;
			<task-create-error-on-success(|ctx, match, msg)> c
	
	nabl-constraint(|ctx):
		NewObject(c) -> <fail>
		where
			lookup := <type-lookup(|ctx)> c ;
			match  := <type-match(|ctx, MAINCLASS())> lookup ; //TODO: where should I have declared a constructor?
			msg    := "Illegal instantiation of main class" ;
			<task-create-error-on-success(|ctx, match, msg)> c
    
    
	
	
			